import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.openhab.core.library.items.*

import java.util.concurrent.locks.ReentrantLock


var java.util.concurrent.locks.ReentrantLock lock1 = new java.util.concurrent.locks.ReentrantLock()



var Timer MotionStateTimer = null
var Timer MotionTimer = null


rule "Init Items"
when
    System started
then
    if (MotionSensorTimer_BedM.state == Uninitialized) {
        sendCommand(MotionSensorTimer_BedM, 5)
        postUpdate(MotionSensorTimer_BedM, 5)
    }
    if (LightType_BedM.state == Uninitialized) {
        sendCommand(LightType_BedM, 2)
        postUpdate(LightType_BedM, 2)
    }
    if (Version_BedM.state == Uninitialized) {
        sendCommand(Version_BedM, 0)
        postUpdate(Version_BedM, 0)
    }
    if (IP_BedM.state == Uninitialized) {
        sendCommand(IP_BedM, "0.0.0.0")
        postUpdate(IP_BedM, "0.0.0.0")
    }
    if (MAC_BedM.state == Uninitialized) {
        sendCommand(MAC_BedM, "ff:ff:ff:ff:ff:ff")
        postUpdate(MAC_BedM, "ff:ff:ff:ff:ff:ff")
    }

   
end


rule "Send Settings on ESP"
when
    Item Uptime_BedM received update
then
	Thread::sleep(5000)
    if (Version_BedM.state == 0) {
        postUpdate(MotionSensorTimer_BedM, MotionSensorTimer_BedM.state)
        postUpdate(Version_BedM, 0)
    }
end


rule "Manage Light_BedM"
when
    Item LightType_BedM received update
then
    if (LightType_BedM.state == 1) {
    	sendCommand(Light_BedM, 1)
		postUpdate(Light_BedM, 1)
		if(MotionTimer!=null) {
                MotionTimer.cancel
                MotionTimer = null
        }
    }
    if (LightType_BedM.state == 0) {
    	sendCommand(Light_BedM, 0)
		postUpdate(Light_BedM, 0)
		if(MotionTimer!=null) {
                MotionTimer.cancel
                MotionTimer = null
        }
    }
   
end


rule "Timer Motion Sensor state"
when
	Item MotionSensor_BedM received update
then
	var Number time1 = MotionSensorTimer_BedM.state as DecimalType
	var int time2 = (time1 * 60).intValue

	if(MotionSensor_BedM.state == ON && LightType_BedM.state == 2) {
		if(MotionStateTimer==null) {
			sendCommand(MotionState_BedM, 1)
			MotionStateTimer = createTimer(now.plusSeconds(10)) [|
				sendCommand(MotionState_BedM, 0)
				MotionStateTimer.cancel
				MotionStateTimer = null
			]
		} else {
                MotionStateTimer.reschedule(now.plusSeconds(10))
        }
        if(MotionTimer==null) {
			sendCommand(Light_BedM, 1)
            postUpdate(Light_BedM, 1)
			MotionTimer = createTimer(now.plusSeconds(time2)) [|
				sendCommand(Light_BedM, 0)
                postUpdate(Light_BedM, 0)
				MotionTimer.cancel
				MotionTimer = null
			]
		} else {
                MotionTimer.reschedule(now.plusSeconds(time2))
        }

	} 
end




rule "Records last Temp_BedM update time"
when
  Item Temp_BedM received update
then
  postUpdate(Temp_BedM_LastUpdate, new DateTimeType())
end


rule "Records last Humidity_BedM update time"
when
  Item Humidity_BedM received update
then
  postUpdate(Humidity_BedM_LastUpdate, new DateTimeType())
end


rule "Records last Lux_BedM update time"
when
  Item Lux_BedM received update
then
  postUpdate(Lux_BedM_LastUpdate, new DateTimeType())
end

rule "Records last Pressure_BedM update time"
when
  Item Pressure_BedM received update
then
  postUpdate(Pressure_BedM_LastUpdate, new DateTimeType())
end
